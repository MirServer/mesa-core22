name: mesa-core22
license: MIT
base: core22
summary: Mesa libraries for core22 snaps
description: |
  A content snap containing the mesa libraries and drivers for `base: core22` snaps.

  It supports a broad range of hardware through the Mesa stack as well as Nvidia
  drivers installed from your distribution through the native SnapD support.

  To make use of this snap in your application, allowing for GPU acceleration on
  a broader set of hardware without including the drivers in your snap, refer to the
  documentation below:

  https://mir-server.io/docs/the-graphics-core22-snap-interface
website: https://github.com/MirServer/mesa-core22
contact: https://github.com/MirServer/mesa-core22/issues

compression: lzo
adopt-info: dri

grade: stable
confinement: strict

architectures:
  - build-on: amd64
  - build-on: arm64
  - build-on: armhf
  - build-on: ppc64el
  - build-on: s390x
  - build-on: riscv64

parts:
  i386-repo:
    plugin: nil
    override-pull: |
      if [ ${CRAFT_TARGET_ARCH} = "amd64" ]; then
        dpkg --add-architecture i386
        apt-get update
      fi

  apis:
    # This provides the essential APIs
    #   o libGL.so.0
    #   o libEGL.so.1
    #   o libva.so.2
    #   o libvulkan.so.1
    #   o libgbm.so.1
    #
    after: [i386-repo]  # because LP#2009278
    plugin: nil
    stage-packages:
      - libgl1
      - libegl1
      - libgles2
      - libvulkan1
      - libgbm1
    prime:
      - usr/lib
      - usr/share/glvnd

  drm:
    # DRM userspace
    #   o libdrm.so.2
    after: [i386-repo]  # because LP#2009278
    plugin: nil
    stage-packages:
      - libdrm2
      - libdrm-common
    organize:
      # Expected at /libdrm by the `graphics-core22` interface
      usr/share/libdrm: libdrm
    prime:
      - usr/lib
      - libdrm

  va:
    # Video Acceleration API
    #   o libva.so.2
    after: [i386-repo]  # because LP#2009278
    plugin: nil
    stage-packages:
      - libva2
    prime:
      - usr/lib

  dri:
    # Userspace drivers
    after: [i386-repo]  # because LP#2009278
    plugin: nil
    stage-packages:
      - libgl1-mesa-dri
      - va-driver-all
      - vdpau-driver-all
      - libvdpau-va-gl1
      - mesa-vulkan-drivers
      - libglx-mesa0
    organize:
      # Expected at /drirc.d by the `graphics-core22` interface
      usr/share/drirc.d: drirc.d
    prime:
      - usr/lib
      - usr/share/vulkan
      - drirc.d
    override-stage: |
      sed -i 's@/usr/lib/[a-z0-9_-]\+/@@' ${CRAFT_PART_INSTALL}/usr/share/vulkan/*/*.json
      craftctl default
      craftctl set version=$( apt-cache policy libgl1-mesa-dri | sed -rne 's/^\s+Candidate:\s+([^-]*)-.+$/\1/p' )

  x11:
    # X11 support (not much cost to having this)
    #   o libGLX.so.0
    after: [i386-repo]  # because LP#2009278
    plugin: nil
    stage-packages:
      - libglx0
      - libva-x11-2
      - libx11-xcb1
      - libxau6
      - libxcb-dri2-0
      - libxcb-dri3-0
      - libxcb-present0
      - libxcb-sync1
      - libxcb-xfixes0
      - libxcb1
      - libxdamage1
      - libxdmcp6
      - libxshmfence1
    organize:
      # Expected at /X11 by the `graphics-core22` interface
      usr/share/X11: X11
    prime:
      - usr/lib
      - X11

  wayland:
    # Wayland support (not much cost to having this)
    after: [i386-repo]  # because LP#2009278
    plugin: nil
    stage-packages:
      - libwayland-client0
      - libwayland-egl1
      - libwayland-server0
      - libnvidia-egl-wayland1
    prime:
      - usr/lib
      - usr/share/egl/egl_external_platform.d

  apis-i386:
      # This provides the essential APIs
      #   o libGL.so.1
      #   o libEGL.so.1
      #   o libva.so.2
      #   o libvulkan.so.1
      #   o libgbm.so.1
      #
    after: [i386-repo]  # because LP#2009278
    plugin: nil
    stage-packages:
      - on amd64:
        - libgl1:i386
        - libegl1:i386
        - libgles2:i386
        - libvulkan1:i386
        - libgbm1:i386
    override-prime: |
      if [ `arch` = "x86_64" ]; then craftctl default; fi
    prime:
      - usr/lib
      - usr/share/glvnd

  drm-i386:
    # DRM userspace
    #   o libdrm.so.2
    after: [i386-repo]  # because LP#2009278
    plugin: nil
    stage-packages:
      - on amd64:
        - libdrm2:i386
        - libdrm-common
    override-prime: |
      if [ `arch` = "x86_64" ]; then craftctl default; fi
    organize:
      # Expected at /libdrm by the `graphics-core22` interface
      usr/share/libdrm: libdrm
    prime:
      - usr/lib
      - libdrm

  va-i386:
    # Video Acceleration API
    #   o libva.so.2
    after: [i386-repo]  # because LP#2009278
    plugin: nil
    stage-packages:
      - on amd64:
        - libva2:i386
    override-prime: |
      if [ `arch` = "x86_64" ]; then craftctl default; fi
    prime:
      - usr/lib

  dri-i386:
    # Userspace drivers
    after: [i386-repo]  # because LP#2009278
    plugin: nil
    stage-packages:
      - on amd64:
        - libgl1-mesa-dri:i386
        - va-driver-all:i386
        - vdpau-driver-all:i386
        - mesa-vulkan-drivers:i386
        - libglx-mesa0:i386
    override-stage: |
      if [ `arch` = "x86_64" ]; then
        sed -i 's@/usr/lib/[a-z0-9_-]\+/@@' ${CRAFT_PART_INSTALL}/usr/share/vulkan/*/*.json
      fi
      craftctl default
    organize:
      # Expected at /drirc.d by the `graphics-core22` interface
      usr/share/drirc.d: drirc.d
    override-prime: |
      if [ `arch` = "x86_64" ]; then craftctl default; fi
    prime:
      - usr/lib
      - usr/share/vulkan
      - drirc.d

  x11-i386:
    # X11 support (not much cost to having this)
    #   o libGLX.so.0
    after: [i386-repo]  # because LP#2009278
    plugin: nil
    stage-packages:
      - on amd64:
        - libglx0:i386
        - libva-x11-2:i386
        - libx11-xcb1:i386
        - libxau6:i386
        - libxcb-dri2-0:i386
        - libxcb-dri3-0:i386
        - libxcb-present0:i386
        - libxcb-sync1:i386
        - libxcb-xfixes0:i386
        - libxcb1:i386
        - libxdamage1:i386
        - libxdmcp6:i386
        - libxshmfence1:i386
    organize:
      # Expected at /X11 by the `graphics-core22` interface
      usr/share/X11: X11
    override-prime: |
      if [ `arch` = "x86_64" ]; then craftctl default; fi
    prime:
      - usr/lib
      - X11

  wayland-i386:
    # Wayland support (not much cost to having this)
    after: [i386-repo]  # because LP#2009278
    plugin: nil
    stage-packages:
      - on amd64:
        - libwayland-client0:i386
        - libwayland-egl1:i386
        - libwayland-server0:i386
        - libnvidia-egl-wayland1:i386
    override-prime: |
      if [ `arch` = "x86_64" ]; then craftctl default; fi
    prime:
      - usr/lib
      - usr/share/egl/egl_external_platform.d

  file-list:
    after:
    - apis
    - drm
    - dri
    - va
    - x11
    - wayland
    - apis-i386
    - drm-i386
    - dri-i386
    - va-i386
    - x11-i386
    - wayland-i386
    plugin: nil
    override-prime: |
      mkdir -p ${CRAFT_PRIME}/snap
      (
        cd ${CRAFT_PART_INSTALL}/../..
        # All the cruft coming from stage packages, but not actually staged
        find $( ls -d */install/{etc,usr/{bin,share/{bug,doc,gcc,gdb,lintian,man}}} ) -type f,l | cut -d/ -f3-
        cd ${CRAFT_PRIME}
        # Everything that is indeed staged
        find usr -type f,l
        # The re-organized bits
        find drirc.d libdrm X11 -type f,l | awk '{ print "usr/share/" $0 }'
      ) | sort -u > ${CRAFT_PRIME}/snap/${CRAFT_TARGET_ARCH}.list

  scripts:
    after: [file-list]
    plugin: nil
    source: scripts
    override-build: |
      set -x
      SCRIPT=bin/graphics-core22-provider-wrapper
      ARCH_TRIPLETS=( ${CRAFT_ARCH_TRIPLET} )

      [ ${CRAFT_TARGET_ARCH} == amd64 ] && ARCH_TRIPLETS+=( i386-linux-gnu )

      mkdir -p ${CRAFT_PART_INSTALL}/bin
      sed "s/@ARCH_TRIPLETS@/${ARCH_TRIPLETS[*]}/" \
        ${CRAFT_PART_SRC}/${SCRIPT}.in \
        > ${CRAFT_PART_INSTALL}/${SCRIPT}
      chmod 555 ${CRAFT_PART_INSTALL}/${SCRIPT}

slots:
  graphics-core22:
    interface: content
    read: [$SNAP]
